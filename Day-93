//Quseyion: Buy and Sell a Share at most twice
/*In daily share trading, a buyer buys shares in the morning and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, 
the second transaction can only start after the first one is complete (buy->sell->buy->sell). The stock prices throughout the day are represented in the form of an array of prices. 

Given an array price of size n, find out the maximum profit that a share trader could have made.*/

class Solution {
    public static int maxProfit(int n, int[] price) {
        if (n <= 1) {
            return 0;
        }
        int[] profit1 = new int[n];
        int[] profit2 = new int[n];
        int minPrice1 = price[0];
        for (int i=1;i<n;i++) {
            minPrice1 = Math.min(minPrice1, price[i]);
            profit1[i] = Math.max(profit1[i - 1], price[i] - minPrice1);
        }
        int maxPrice2 = price[n - 1];
        for (int i=n-2;i>=0;i--) {
            maxPrice2 = Math.max(maxPrice2, price[i]);
            profit2[i] = Math.max(profit2[i + 1], maxPrice2 - price[i]);
        }
        int maxProfit = 0;
        for (int i = 0; i < n; i++) {
            maxProfit = Math.max(maxProfit, profit1[i] + (i + 1 < n ? profit2[i + 1] : 0));
        }
        return maxProfit;
    }
    public static void main(String[] args) {
        int n1 = 6;
        int[] prices1 = {10,22,5,75,65,80};
        System.out.println(maxProfit(n1, prices1));
        int n2 = 7;
        int[] prices2 = {2,30,15,10,8,25,80};
        System.out.println(maxProfit(n2, prices2));
    }
}
